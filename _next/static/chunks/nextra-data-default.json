{"/":{"title":"Introduction","data":{"":"A new way to write declarative UIs\n\n\n\n\n\n\n\n\n\"It's a firebolt, the fastest broom in the world.\"\n\n\n\nFirebolt takes the old MVC approach but in a new way, giving you more control\nover the UI and the Logic. Under the hood we use\nCustomElements\nto define your components, see a list of\nsupported browsers.\n\n\nGet Started Â· Playground Â·\nBlog Â· GitHub\nRepository\n\n\n\nOverview\n\n\n\nconst GithubStarButton = firebolt.create(\"button\", () => {\nreturn {\ncomponent: \"github-star-button\",\nentry: \"main section.github-star-button\",\ntextContent: \"Star the repository\",\nonclick(event) {\nthis.textContext = \"Has already starred\";\nthis.disabled = true;\n},\n};\n});\n\n\nIn this example, the firebolt.create method accepts a tag or a\nFirebolt UI Element and\ncontroller function. tag is the element you\nwould like to create or you could create a Firebolt UI Element and customize\nit's UI entirely. the controller function is where you define the element\nprops and handle state and other things.\n\n\nthe controller can also just be an object an seen in the example below\n\n\n\nconst GithubStarButton = firebolt.create(\"button\", {\ncomponent: \"github-star-button\",\n...<your props>\n});\n\n\nwhen using firebolt.create a new element is registered in the DOM, if you\njust mean to create a UI element and put it in the DOM by hand, you can\nachieve just that by using firebolt.createElement:\n\n\nconst GithubStarButtonUI = firebolt.createElement(() => {\nconst { creatorName } = firebolt.useContext(AuthorContext);\n\nreturn `\n<button>\n${creatorName}\n</button>\n`;\n});\n\n\nwhen using firebolt.createElement you still can use all the state-related\nfeatures that firebolt has.\n\n\nYou can use any HTML renderer when returning from createElement, like\nuHTML for example\n\n\n\nconst GithubStarButtonUI = firebolt.createElement(() => {\nreturn html`hi mom, i'm using uHTML`;\n});\n\n\nThen if you want to use the GithubStarButtonUI with some logic just pass it\nas the first parameter like so:\n\n\nconst GithubStarButton = firebolt.create(GithubStarButtonUI, {\ncomponent: \"github-star-button\",\n...<your props>\n});\n\n\nFirebolt gives you full control over the DOM, so you can use elements the way\nyou want. In this example, the GithubStarButton contains special functions\nthat you can use to modify state, listen to updates or change prop values.\n\n\nFeatures\n\n\nWith some lines of code you can simplify the way you work with JavaScript,\ntoday we have a subset of selected features but Firebolt is designed to be\nextensible, so if you want more features, checkout the available\nplugins\n\n- âš¡ Fast, ðŸª¶ lightweight and reusable elements\n\n\n- Built-in state and context management\n\n\n- SSR support\n\n\n- Temporal API polyfill\n\n\n- Unified Storage API\n\n\n- JQuery like DOM API\n\n\n- Easy two-way data binding\n\n\n- TypeScript ready\n\n\n- Better data-fetching API\n\n\n- Routing\n\n\n- Suspense API\n\nAnd a lot more.\n\n\nInstalling\n\nfirst, load the script into your HTML or JavaScript file\n<script type=\"module\" src=\"public/firebolt.js\">\nor\nimport firebolt from \"./firebolt.js\";\nthen start using firebolt, it's that simple!Firebolt is created by Vitor Gouveia.This docs was created using Nextra, heavily inspired by SWR and SWC websites"}},"/docs/getting-started":{"title":"Getting Started","data":{"":""}}}